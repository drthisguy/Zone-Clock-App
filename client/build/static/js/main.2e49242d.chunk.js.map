{"version":3,"sources":["logo.svg","assets/img/sapling.png","assets/img/Sapling-RoundMount.png","assets/img/DialS.png","assets/img/clock-ABS.png","components/Grid/index.js","components/Navbar/index.js","components/ClockMount/index.js","components/Search/index.js","utils/API.js","pages/Main/Main.js","utils/CustomHooks.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","classes","children","className","Row","Col","size","split","map","join","Collapse","navState","id","NavBar","useState","navLinks","showNavLinks","pathname","useLocation","style","backgroundImage","to","onClick","type","data-toggle","data-target","alt","src","require","logo","float","height","ClockMount","AnalogClock","dial","background","backgroundPosition","backgroundRepeat","backgroundSize","marginTop","marginLeft","SearchField","props","Button","city","response","axios","get","console","log","a","country","fetch","process","json","Main","token","uuid","setCity","predictions","setPredictions","url","onInputChange","data","setData","isLoading","setIsLoading","hasError","setError","errorMessage","setErrorMessage","fetchData","result","status","message","useEffect","useFetch","e","target","name","value","API","length","suggestions","x","description","text","selectPredictions","class","placeholder","autocomplete","onChange","listStyleType","textAlign","suggestion","i","key","renderPredictions","analog","href","rel","width","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.2e49242d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/sapling.49966c7a.png\";","module.exports = __webpack_public_path__ + \"static/media/Sapling-RoundMount.eb663b29.png\";","module.exports = __webpack_public_path__ + \"static/media/DialS.39843a78.png\";","module.exports = __webpack_public_path__ + \"static/media/clock-ABS.9f2b42ca.png\";","import React from 'react'\n\n        \nexport const Container = ({ classes, children }) => <div className={`container ${classes}`}>{children}</div>\n\nexport const Row = ({ classes, children }) => <div className={`row ${classes}`}>{children}</div>\n\nexport const Col = ({ size, classes, children }) => {\n    return ( <div \n        className={size.split(' ').map( size => `col-${size}`).join(' ')\n        +\" \"+ classes}>{children}</div>\n    )\n    }\n\nexport const Collapse = ({ navState, children, id }) => { \n    const classes = navState ? 'navbar-collapse collapse show' : 'navbar-collapse collapse';\n\n     return <div className={classes} id={id}>{children}</div>\n}\n\nexport const Wrapper = ({ children }) => <Container > <Row >{children}</Row></Container>","import React, { useState } from 'react'\nimport { Link, useLocation } from 'react-router-dom'\nimport { Collapse } from '../Grid'\n\nexport default function NavBar() {\n\n    let [navLinks, showNavLinks] = useState(false)\n    const { pathname } = useLocation(),\n\n     toggleNav = () => showNavLinks(navLinks = !navLinks)\n\n    return (\n        <nav className={'navbar navbar-expand-lg navbar-light bg-light'}\n        style={{backgroundImage: 'linear-gradient(to right, white , #fcaf17)'}}\n        >\n            <Link to='/' className={'navbar-brand'}>Sapling Zone Clocks</Link>\n            <button onClick={toggleNav} className={'navbar-toggler'} type=\"button\" data-toggle=\"collapse\" data-target=\"#target-collapse\" >\n            <span className=\"navbar-toggler-icon\"></span>\n            </button>\n                \n            <Collapse navState={navLinks} id={'target-collapse'}>\n              <ul className=\"navbar-nav mr-auto\">\n                <li className={pathname === \"/\" ? \"nav-item active\" : \"nav-item\"}>\n                    <Link to=\"/\" className={'nav-link'}>\n                        Search \n                    </Link>    \n                </li>\n                <li className={pathname === \"/profiles\" ? \"nav-item active\" : \"nav-item\"}>\n                    <Link to=\"/saved\" className={'nav-link'}>\n                        Saved Cities\n                    </Link>    \n                </li>\n              </ul>\n                    <img alt='logo' src={require(\"../../assets/img/sapling.png\")} style={logo} />\n            </Collapse>\n        </nav>\n    )\n}\n\nconst logo = {\n    float: 'right', \n    height:'65pt'\n}","import React from 'react';\n\n\n\nexport default function ClockMount() { \n\n    const AnalogClock = () => {\n      return (\n          <div style={dial}>\n\n          </div>\n      )\n     }\n\n\nreturn (\n    <div style={background}>\n        <div style={{height: '1px'}}></div>\n        <AnalogClock />\n    </div>\n)\n}\n\nconst background = {\n    backgroundImage: `url(${require(\"../../assets/img/Sapling-RoundMount.png\")}`,\n    backgroundPosition: 'center',\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: '80%',\n    height: '260px',\n    marginTop: '30px'\n}, \ndial = {\n    backgroundImage: `url(${require(\"../../assets/img/DialS.png\")}`,\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: '14.8%',\n    height: '180px',\n    marginLeft: '133px',\n    marginTop: '36px',\n}","import React from 'react'\n\nexport const SearchField = props => <input className=\"form-control city-query\" {...props} />\n\nexport const Button = props => <button className=\"btn btn-primary btn-lg btn-block\" {...props} >{props.children}</button>\n\n","import axios from \"axios\";\nconst googleAPIKey = process.env.REACT_APP_GOOGLE_APIKEY;\n\n\nexport default {\n    predictCities: city => {\n        const response = axios.get('/api/predictions', city) \n        console.log(\"response\", response)\n\n        return response      \n    }, \n\n    googleThis: async ({ city, country }) => {\n        const response = await fetch (`https://maps.googleapis.com/maps/api/geocode/json?address=${city},+${country}&key=${googleAPIKey}`)\n\n        return await response.json();            \n    }\n}","import React, { useState, useEffect } from 'react';\nimport { uuid } from 'uuidv4';\nimport logo from '../../logo.svg';\nimport { Container, Row, Col } from '../../components/Grid';\nimport ClockMount from '../../components/ClockMount';\nimport { SearchField, Button } from '../../components/Search';\nimport { useFetch } from '../../utils/CustomHooks';\nimport API from '../../utils/API'\n\nexport default function Main() {\n\n  const [city, setCity] = useState({city: 'Sapling-Inc', token: uuid()});\n  const [coordinates, setCoordinates] = useState({})\n  const [properName, setProperName] = useState('')\n  const [predictions, setPredictions] = useState([])\n  const [url, setUrl] = useState('')\n\n  const fetchAPI = useFetch(url),\n\n  onInputChange = async(e) => {\n    const { name, value } = e.target;\n    setCity({ ...city, [name]: value })\n\n    try {\n    const { predictions, status } = await API.predictCities({...city, city: value});\n    let suggestions;\n    if (value.length > 0 && status === 'OK') {\n        suggestions = predictions.map( x => x.description);\n      }\n      setPredictions({ suggestions, text: value })\n  } catch(err) {return}\n  \n    // lat = results[0].geometry.location.lat,\n    // lng = results[0].geometry.location.lng,\n    // place = results[0].formatted_address;\n\n    // setCoordinates({ lat, lng })\n    // setProperName(place)\n},\n\n  renderPredictions = () => {\n    const { suggestions } = predictions;\n\n    if (!suggestions || suggestions.length < 1) return\n    \n    return (\n        <ul style={{listStyleType:\"none\", textAlign:\"left\"}}>\n          {suggestions.map( (suggestion, i) => <li onClick={() => selectPredictions(suggestion)} key={i}>{suggestion}</li>)}\n        </ul>\n    )\n  }, \n\n  selectPredictions = value => {\n    setPredictions({ suggestions: [], text: value })\n  }\n\n\n  useEffect(() => {\n    // const { data, isLoading, hasError, errorMessage } = fetchAPI\n   \n    \n    // setUrl(`https://maps.googleapis.com/maps/api/geocode/json?address=paris,+france&key=${googAPIKey}`)\n  }, [])\n  \n  const getZone= () => {\n    \n  }\n\n    return (  \n        <Container >\n        <ClockMount />\n        <Row >\n          <Col size=\"md-3\" >\n            <form class=\"form-group my-4\">\n                <SearchField \n                placeholder=\"Search a City...\"\n                name=\"city\"\n                value={predictions.text}\n                autocomplete=\"off\"\n                onChange={onInputChange}\n                />\n                {renderPredictions()}\n                <SearchField \n                placeholder=\"State or Country..\" \n                name=\"country\"\n                autocomplete=\"off\"\n                onChange={onInputChange}\n                />\n                <Button>Search</Button>\n            </form>\n          </Col>\n          <Col size=\"md-9\" >\n                <div className=\"jumbotron\">\n                    <Row >\n                        <Col size='md-6'>\n                            <h4>Metropolis City</h4>\n                        </Col>\n                        <Col size='md-6' classes=\"mt-n5\">\n                            <img style={analog} src={require('../../assets/img/clock-ABS.png')} alt=\"Analog Clock\" />\n                        </Col>\n                    </Row>\n\n                </div>\n          </Col>\n        </Row>\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <p>\n              Edit <code>src/App.js</code> and save to reload.\n            </p>\n            <a\n              className=\"App-link\"\n              href=\"https://reactjs.org\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Learn React\n            </a>\n          </header>\n          </Container>\n    )\n}\n\nconst analog = {\n    width: '245px',\n    float: 'right'\n}","import { useState, useEffect, useRef } from 'react';\n\n\nexport const useFetch = url => {\n    const [ data, setData ] = useState(null),\n     [ isLoading, setIsLoading ] = useState(false),\n     [ hasError, setError ] = useState(false),\n     [ errorMessage, setErrorMessage ] = useState(''),\n\n     fetchData = async () => {\n        setIsLoading(true)\n\n        try {\n          const response = await fetch(url),\n           result = await response.json();\n          if (result.status === 'OK') {\n            setData(result)\n            console.log(\"fetchData -> result\", result)\n          } else {\n            setError(true)\n            setData(result)\n            setErrorMessage('Nothing found. Check spelling. Or if the problem persist, the resource may be down. Try again later.')\n          }\n          \n          setIsLoading(false)\n        } catch (err) {\n          setError(true)\n          setErrorMessage(err.message)\n          setIsLoading(false)\n        }\n    }\n    \n    useEffect(() => {\n        fetchData()\n        }, []);\n    \n    return { data, isLoading, hasError, errorMessage }\n}\n\n//used to track previous states for comparison purposes. ex use:  previousItem = usePrevious(itemInput.property),\n export const usePrevious = value => {\n\n        const ref = useRef();\n        useEffect(() => {\n        ref.current = value;\n        }, [value]);\n\n    return ref.current;\n}\n\n//force the re-rendering of state.\nexport const useForceUpdate = () => {\n    const [value, setValue] = useState(0); \n    return () => setValue(value => ++value); // update the state to force render\n}","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Navbar from './components/Navbar'\nimport Main from './pages/Main'\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <Router >\n    <div className=\"App\">\n    <Navbar />\n    <Main />\n   \n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}