{"ast":null,"code":"import { useState, useEffect, useRef } from 'react';\nexport const useFetch = url => {\n  const [data, setData] = useState(null),\n        [isLoading, setIsLoading] = useState(false),\n        [hasError, setError] = useState(false),\n        [errorMessage, setErrorMessage] = useState(''),\n        fetchData = async () => {\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(url),\n            result = await response.json();\n\n      if (result.status === 'OK') {\n        setData(result);\n      } else {\n        setError(true);\n        setData(result);\n        setErrorMessage('Nothing found. Check spelling. Or if the problem persist, the resource may be down. Try again later.');\n      }\n\n      setIsLoading(false);\n    } catch (err) {\n      setError(true);\n      setErrorMessage(err.message);\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  });\n  return {\n    data,\n    isLoading,\n    hasError,\n    errorMessage\n  };\n}; //used to track previous states for comparison purposes. ex use:  previousItem = usePrevious(itemInput.property),\n\nexport const usePrevious = value => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}; //force the re-rendering of state.\n\nexport const useForceUpdate = () => {\n  const [value, setValue] = useState(0);\n  return () => setValue(value => ++value); // update the state to force render\n};","map":{"version":3,"sources":["/Users/page/Google Drive/Sandbox/zoneclock-utility/src/utils/CustomHooks.js"],"names":["useState","useEffect","useRef","useFetch","url","data","setData","isLoading","setIsLoading","hasError","setError","errorMessage","setErrorMessage","fetchData","response","fetch","result","json","status","err","message","usePrevious","value","ref","current","useForceUpdate","setValue"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AAGA,OAAO,MAAMC,QAAQ,GAAGC,GAAG,IAAI;AAC3B,QAAM,CAAEC,IAAF,EAAQC,OAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AAAA,QACC,CAAEO,SAAF,EAAaC,YAAb,IAA8BR,QAAQ,CAAC,KAAD,CADvC;AAAA,QAEC,CAAES,QAAF,EAAYC,QAAZ,IAAyBV,QAAQ,CAAC,KAAD,CAFlC;AAAA,QAGC,CAAEW,YAAF,EAAgBC,eAAhB,IAAoCZ,QAAQ,CAAC,EAAD,CAH7C;AAAA,QAKCa,SAAS,GAAG,YAAY;AACrBL,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,QAAI;AACF,YAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACX,GAAD,CAA5B;AAAA,YACCY,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EADhB;;AAEA,UAAID,MAAM,CAACE,MAAP,KAAkB,IAAtB,EAA4B;AAC1BZ,QAAAA,OAAO,CAACU,MAAD,CAAP;AACD,OAFD,MAEO;AACLN,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAJ,QAAAA,OAAO,CAACU,MAAD,CAAP;AACAJ,QAAAA,eAAe,CAAC,sGAAD,CAAf;AACD;;AAEDJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAZD,CAYE,OAAOW,GAAP,EAAY;AACZT,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,MAAAA,eAAe,CAACO,GAAG,CAACC,OAAL,CAAf;AACAZ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACJ,GAzBD;;AA2BAP,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,SAAS;AACR,GAFI,CAAT;AAIA,SAAO;AAAER,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA,QAAnB;AAA6BE,IAAAA;AAA7B,GAAP;AACH,CAjCM,C,CAmCP;;AACC,OAAO,MAAMU,WAAW,GAAGC,KAAK,IAAI;AAE7B,QAAMC,GAAG,GAAGrB,MAAM,EAAlB;AACAD,EAAAA,SAAS,CAAC,MAAM;AAChBsB,IAAAA,GAAG,CAACC,OAAJ,GAAcF,KAAd;AACC,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIJ,SAAOC,GAAG,CAACC,OAAX;AACH,CARO,C,CAUR;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAChC,QAAM,CAACH,KAAD,EAAQI,QAAR,IAAoB1B,QAAQ,CAAC,CAAD,CAAlC;AACA,SAAO,MAAM0B,QAAQ,CAACJ,KAAK,IAAI,EAAEA,KAAZ,CAArB,CAFgC,CAES;AAC5C,CAHM","sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\n\nexport const useFetch = url => {\n    const [ data, setData ] = useState(null),\n     [ isLoading, setIsLoading ] = useState(false),\n     [ hasError, setError ] = useState(false),\n     [ errorMessage, setErrorMessage ] = useState(''),\n\n     fetchData = async () => {\n        setIsLoading(true)\n\n        try {\n          const response = await fetch(url),\n           result = await response.json();\n          if (result.status === 'OK') {\n            setData(result)\n          } else {\n            setError(true)\n            setData(result)\n            setErrorMessage('Nothing found. Check spelling. Or if the problem persist, the resource may be down. Try again later.')\n          }\n          \n          setIsLoading(false)\n        } catch (err) {\n          setError(true)\n          setErrorMessage(err.message)\n          setIsLoading(false)\n        }\n    }\n    \n    useEffect(() => {\n        fetchData()\n        }, );\n    \n    return { data, isLoading, hasError, errorMessage }\n}\n\n//used to track previous states for comparison purposes. ex use:  previousItem = usePrevious(itemInput.property),\n export const usePrevious = value => {\n\n        const ref = useRef();\n        useEffect(() => {\n        ref.current = value;\n        }, [value]);\n\n    return ref.current;\n}\n\n//force the re-rendering of state.\nexport const useForceUpdate = () => {\n    const [value, setValue] = useState(0); \n    return () => setValue(value => ++value); // update the state to force render\n}"]},"metadata":{},"sourceType":"module"}