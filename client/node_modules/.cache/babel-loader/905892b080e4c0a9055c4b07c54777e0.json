{"ast":null,"code":"import _regeneratorRuntime from\"/Users/page/Google Drive/Sandbox/zoneclock-utility/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/page/Google Drive/Sandbox/zoneclock-utility/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from\"axios\";var googleAPIKey=process.env.REACT_APP_GOOGLE_APIKEY;export default{predictCities:function predictCities(city){var response=axios.get('/api/predictions',city);console.log(\"response\",response);return response;},googleThis:function(){var _googleThis=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref){var city,country,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:city=_ref.city,country=_ref.country;_context.next=3;return fetch(\"https://maps.googleapis.com/maps/api/geocode/json?address=\".concat(city,\",+\").concat(country,\"&key=\").concat(googleAPIKey));case 3:response=_context.sent;_context.next=6;return response.json();case 6:return _context.abrupt(\"return\",_context.sent);case 7:case\"end\":return _context.stop();}}},_callee);}));function googleThis(_x){return _googleThis.apply(this,arguments);}return googleThis;}()};","map":{"version":3,"sources":["/Users/page/Google Drive/Sandbox/zoneclock-utility/client/src/utils/API.js"],"names":["axios","googleAPIKey","process","env","REACT_APP_GOOGLE_APIKEY","predictCities","city","response","get","console","log","googleThis","country","fetch","json"],"mappings":"6VAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,GAAMC,CAAAA,YAAY,CAAGC,OAAO,CAACC,GAAR,CAAYC,uBAAjC,CAGA,cAAe,CACXC,aAAa,CAAE,uBAAAC,IAAI,CAAI,CACnB,GAAMC,CAAAA,QAAQ,CAAGP,KAAK,CAACQ,GAAN,CAAU,kBAAV,CAA8BF,IAA9B,CAAjB,CACAG,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAwBH,QAAxB,EAEA,MAAOA,CAAAA,QAAP,CACH,CANU,CAQXI,UAAU,oFAAE,iKAASL,IAAT,MAASA,IAAT,CAAeM,OAAf,MAAeA,OAAf,uBACeC,CAAAA,KAAK,qEAA+DP,IAA/D,cAAwEM,OAAxE,iBAAuFX,YAAvF,EADpB,QACFM,QADE,qCAGKA,CAAAA,QAAQ,CAACO,IAAT,EAHL,6GAAF,0FARC,CAAf","sourcesContent":["import axios from \"axios\";\nconst googleAPIKey = process.env.REACT_APP_GOOGLE_APIKEY;\n\n\nexport default {\n    predictCities: city => {\n        const response = axios.get('/api/predictions', city) \n        console.log(\"response\", response)\n\n        return response      \n    }, \n\n    googleThis: async ({ city, country }) => {\n        const response = await fetch (`https://maps.googleapis.com/maps/api/geocode/json?address=${city},+${country}&key=${googleAPIKey}`)\n\n        return await response.json();            \n    }\n}"]},"metadata":{},"sourceType":"module"}